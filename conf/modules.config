/*
========================================================================================
    Config file for defining DSL2 per module options
========================================================================================
    Available keys to override module options:
        args            = Additional arguments appended to command in module.
        args2           = Second set of arguments appended to command in module (multi-tool modules).
        args3           = Third set of arguments appended to command in module (multi-tool modules).
        publish_dir     = Directory to publish results.
        publish_by_meta = Groovy list of keys available in meta map to append as directories to "publish_dir" path
                            If publish_by_meta = true                 - Value of ${meta['id']} is appended as a directory to "publish_dir" path
                            If publish_by_meta = ['id', 'custompath'] - If "id" is in meta map and "custompath" isn't then "${meta['id']}/custompath/"
                                                                        is appended as a directory to "publish_dir" path
                            If publish_by_meta = false / null         - No directories are appended to "publish_dir" path
        publish_files   = Groovy map where key = "file_ext" and value = "directory" to publish results for that file extension
                            The value of "directory" is appended to the standard "publish_dir" path as defined above.
                            If publish_files = null (unspecified)     - All files are published.
                            If publish_files = false                  - No files are published.
        suffix          = File name suffix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: UMITOOLS_EXTRACT {
        ext.args   = { "--bc-pattern=${params.umitools_bc_pattern}" }
        publishDir = [
            enabled: false
        ]
    }

    withName: SAMTOOLS_FAIDX {
        publishDir = [
            enabled: false
        ]
    }

    withName: SAMTOOLS_INDEX {
        publishDir = [
            enabled: false
        ]
    }

    withName: UMICOLLAPSE {
        publishDir = [
            enabled: false
        ]
    }

    withName: CUTADAPT_ADAPTERS {
        ext.args = '-q 10 -m 18 -a AGATCGGAAGAGC'
        publishDir = [
            enabled: false
        ]
    }

    withName: CUTADAPT_ADAPTERS_TSO {
        ext.args = '--cut 3 -q 10 -m 18 -a AGATCGGAAGAGC'
        publishDir = [
            enabled: false
        ]
    }

    withName: 'QUANTSEQ:GET_POLYA_READS:CUTADAPT_UNTRIMMED' {
        ext.args   = '--no-indels -e 0 -O 5 -a "AAAAA$" --no-trim'
        ext.prefix = 'polya'
        publishDir = [
            path: { "${params.outdir}/polya/${meta.id}" },
            enabled: false
        ]
    }

    withName: 'QUANTSEQ:GET_POLYA_READS:CUTADAPT' {
        ext.args   = '-m 18 --cut 12 --no-indels -e 0 -a "A{1000}"'
        publishDir = [
            path: { "${params.outdir}/polya_cutadapt" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }

    withName: GUNZIP {
        publishDir = [
            path: { "${params.outdir}/gunzip/gtf" },
            enabled: false
        ]
    }

    withName: STAR_GENOMEGENERATE {
        publishDir = [
            path: { "${params.outdir}/star_index" },
            enabled: false
        ]
    }

    withName: STAR_ALIGN {
        ext.args = [
            "--readFilesCommand zcat",
            "--genomeLoad NoSharedMemory",
            "--sjdbScore 1",
            "--alignSJoverhangMin 8",
            "--alignSJDBoverhangMin 1",
            "--outFilterMultimapNmax 1",
            "--outFilterMismatchNmax 999",
            "--outFilterMismatchNoverReadLmax 0.04",
            "--alignIntronMin 20",
            "--alignIntronMax 1000000",
            "--alignMatesGapMax 1000000",
            "--outFilterType BySJout",
            "--twopassMode Basic",
            "--outSAMattributes All",
            "--outSAMstrandField intronMotif",
            "--outSAMtype BAM SortedByCoordinate",
            "--limitBAMsortRAM 60000000000"
        ].join(' ').trim()
        publishDir = [
            enabled: false
        ]
    }

    withName: 'QUANTSEQ:POLYA_COVERAGE:SAMTOOLS_MERGE' {
        publishDir = [
            path: { "${params.outdir}/merged_polya" },
            enabled: false
        ]
    }

    withName: 'QUANTSEQ:POLYA_COVERAGE:BEDTOOLS_GENOMECOV_POS' {
        ext.args   = '-bg -strand + -3'
        ext.prefix = 'pos'
        publishDir = [
            path: { "${params.outdir}/polyaclusters" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'QUANTSEQ:POLYA_COVERAGE:BEDTOOLS_GENOMECOV_NEG' {
        ext.args   = '-bg -strand - -3'
        ext.prefix = 'neg'
        publishDir = [
            path: { "${params.outdir}/polyaclusters" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'QUANTSEQ:POLYA_COVERAGE:BEDTOOLS_GENOMECOV_POS_REVERSED' {
        ext.args   = '-bg -strand - -3'
        ext.prefix = 'pos'
        publishDir = [
            path: { "${params.outdir}/polyaclusters" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'QUANTSEQ:POLYA_COVERAGE:BEDTOOLS_GENOMECOV_NEG_REVERSED' {
        ext.args   = '-bg -strand + -3'
        ext.prefix = 'neg'
        publishDir = [
            path: { "${params.outdir}/polyaclusters" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*RANDOM_PRIMING' {
        ext.args = [
            "--minreads", params.minreads,
            "--clusterdist", params.clusterdist,
            "--pas", params.pas,
            "--apa", params.apa,
            "--nopas", params.nopas,
            "--org", params.org
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/polyaclusters" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: '.*ANNOTATE_POLYA_SITES' {
        ext.args = params.ensembl ? '--ensembl' : ''
        publishDir = [
            path: { "${params.outdir}/polyaclusters" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'QUANTSEQ:GENERATE_COUNT_TABLE:CUTADAPT' {
        ext.args   = '-m 18 --no-indels -e 0 -a "A{1000}"'
        publishDir = [
            path: { "${params.outdir}/mapped" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            enabled: false
        ]
    }

    withName: 'QUANTSEQ:GENERATE_COUNT_TABLE:STAR_ALIGN' {
        ext.args = [
            "--readFilesCommand zcat",
            "--genomeLoad NoSharedMemory",
            "--sjdbScore 1",
            "--alignSJoverhangMin 8",
            "--alignSJDBoverhangMin 1",
            "--outFilterMultimapNmax 1",
            "--outFilterMismatchNmax 999",
            "--outFilterMismatchNoverReadLmax 0.04",
            "--alignIntronMin 20",
            "--alignIntronMax 1000000",
            "--alignMatesGapMax 1000000",
            "--outFilterType BySJout",
            "--twopassMode Basic",
            "--outSAMattributes All",
            "--outSAMstrandField intronMotif",
            "--outSAMtype BAM SortedByCoordinate",
            "--limitBAMsortRAM 60000000000",
            "--quantMode GeneCounts"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/mapped" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'QUANTSEQ:GENERATE_COUNT_TABLE:UMICOLLAPSE'{
            publishDir = [
            path: { "${params.outdir}/mapped_dedup" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'QUANTSEQ:GENERATE_COUNT_TABLE:SAMTOOLS_INDEX' {
        publishDir = [
            path: { "${params.outdir}/mapped" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'QUANTSEQ:GENERATE_COUNT_TABLE:SAMTOOLS_INDEX_DEDUPE' {
        publishDir = [
            path: { "${params.outdir}/mapped_dedup" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'QUANTSEQ:GENERATE_COUNT_TABLE:STAR_INPUTALIGNMENTSFROMBAM' {
        ext.args = [
            "--outWigType bedGraph",
            "--outWigStrand Stranded",
            "--outWigNorm RPM"
        ].join(' ').trim()
        publishDir = [
            enabled: false
        ]
    }

    withName: 'QUANTSEQ:GENERATE_COUNT_TABLE:BEDTOOLS_SORT_POS' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'QUANTSEQ:GENERATE_COUNT_TABLE:BEDTOOLS_SORT_NEG' {
        publishDir = [
            enabled: false
        ]
    }

    withName: 'QUANTSEQ:GENERATE_COUNT_TABLE:UCSC_BEDGRAPHTOBIGWIG_POS' {
        publishDir = [
            path: { "${params.outdir}/bigwig" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'QUANTSEQ:GENERATE_COUNT_TABLE:UCSC_BEDGRAPHTOBIGWIG_NEG' {
        publishDir = [
            path: { "${params.outdir}/bigwig" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'QUANTSEQ:GENERATE_COUNT_TABLE:BEDTOOLS_BAMTOBED' {
        ext.args = "-split"
        publishDir = [
            enabled: false
        ]
    }

    withName: 'QUANTSEQ:GENERATE_COUNT_TABLE:BEDTOOLS_WINDOW' {
        ext.args = [
            "-l", params.clusterdist,
            "-r 0",
            "-sw",
            "-sm",
            "-c"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/counts" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'QUANTSEQ:GENERATE_COUNT_TABLE:BEDTOOLS_WINDOW_REVERSED' {
        ext.args = [
            "-l", params.clusterdist,
            "-r 0",
            "-sw",
            "-Sm",
            "-c"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/counts" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'QUANTSEQ:GENERATE_COUNT_TABLE:BEDGRAPHCONVERT_AWK' {
        ext.extension = 'bedgraph'
            publishDir = [
            path: { "${params.outdir}/counts/bedgraph" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
